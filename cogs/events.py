import asyncio
import time

import disnake
from disnake.ext import commands

from main import db
from cogs.buttons import Voting
from utils.logger import logger


async def add_guild2db(bot, guild_id):
    logger.info(f'[IN PROGRESS] guilds refresh : {guild_id} not in DB -> starting messages analyze')

    db.update_guild_settings(guild_id)

    for ch in bot.get_guild(guild_id).text_channels:
        try:
            async for mes in ch.history(limit=10000):
                if not mes.author.bot and mes.author.name != 'Deleted User':
                    name = mes.author.name.encode('windows-1251', 'replace').decode('windows-1251')
                    db.update_user(mes.guild.id, mes.author.id, name, len(mes.content), len(mes.attachments))

        except disnake.errors.Forbidden:
            continue

    db.update_guild_settings(guild_id, analyze=1)

    logger.info(f'[IN PROGRESS] guilds refresh : {guild_id} not in DB -> messages are analyzed')


async def refresh(bot: commands.InteractionBot):
    """
    –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ë–î –∏ config.py –±–æ—Ç–∞.

    :param bot:
    :return:
    """

    logger.debug('[START] guilds refresh')

    cur_guilds = [g.id for g in bot.guilds]
    db_guilds = [g[0] for g in db.get_guilds() if g[1]]

    if db_guilds != cur_guilds:
        for guild_id in set(db_guilds) - set(cur_guilds):
            db.delete_guild(guild_id)
            logger.warning(f'[IN PROGRESS] guilds refresh : bot not in {db_guilds} but it`s in DB')

        for guild_id in set(cur_guilds) - set(db_guilds):
            await add_guild2db(bot, guild_id)

    logger.debug('[IN PROGRESS] all guilds refresh')

    for voting in db.get_voting():
        author = bot.get_user(voting[3])

        emb = disnake.Embed(title=voting[5], color=disnake.Color.gold())
        emb.add_field('–ó–∞–≤–µ—Ä—à–∏—Ç—Å—è', f'<t:{int(voting[4])}:R>')
        emb.add_field('–í–∞—Ä–∏–∞–Ω—Ç–æ–≤', '–æ—Ç ' + str(voting[6]) + ' –¥–æ ' + str(voting[7]))
        emb.add_field('–í–∞—Ä–∏–∞–Ω—Ç—ã:', ', '.join(voting[8].split('!|?')), inline=False)
        emb.set_footer(text=author.name, icon_url=author.avatar)

        view = Voting(voting[0], voting[5], voting[8].split('!|?'), voting[4] - time.time(), *voting[6:8])

        try:
            await bot.get_channel(voting[2]).get_partial_message(voting[0]).edit(embed=emb, view=view)
        except disnake.errors:
            logger.warning(f'[IN PROGRESS] updating voting - question: {voting[5]} message was deleted')

        logger.info(f'[IN PROGRESS] updating voting - question: {voting[5]}')

    logger.debug('[FINISHED] all voting is update')


async def check_voting_timeout(bot: commands.InteractionBot):
    while True:
        logger.debug('[START] check voting timeout')

        cur_time = time.time()

        try:
            for voting in db.get_voting():
                if voting[4] < cur_time:
                    author = bot.get_user(voting[3])

                    emb = disnake.Embed(title=f'–ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ: {voting[5]}', color=disnake.Color.gold())
                    emb.add_field('–ó–∞–≤–µ—Ä—à–∏–ª–æ—Å—å', f'<t:{int(voting[4])}:R>')
                    emb.add_field('–í–∞—Ä–∏–∞–Ω—Ç–æ–≤', '–æ—Ç ' + str(voting[6]) + ' –¥–æ ' + str(voting[7]))
                    emb.add_field('–í–∞—Ä–∏–∞–Ω—Ç—ã:', ', '.join(voting[8].split('!|?')), inline=False)
                    emb.set_footer(text=author.name, icon_url=author.avatar)

                    res = [info[2] for info in db.get_votes(voting[0])]
                    stat = []

                    for key in set(res):
                        d = res.count(key) / len(res)
                        stat.append((key[:18],
                                     'üî≥' * int(d * 10) + '‚¨ú' * (10 - int(d * 10)),
                                     f'{round(100 * d, 2):.2f} % - {res.count(key)} –≥–æ–ª–æ—Å'))

                    emb.add_field('', '**–†–µ–∑—É–ª—å—Ç–∞—Ç—ã:**')

                    for key, progress, info in stat:
                        emb.add_field(key + ' ' + info, progress, inline=False)

                    try:
                        await bot.get_channel(voting[2]).get_partial_message(voting[0]).edit(embed=emb, view=None)
                    except disnake.errors:
                        logger.warning(f'[IN PROGRESS] deleting voting - question: {voting[5]} message was deleted')

                    db.delete_voting(voting[0])

                    logger.info(f'[IN PROGRESS] deleted voting - question: {voting[5]}')

        except Exception as e:
            logger.warning(f'[IN PROGRESS] {e}')

        logger.debug('[FINISHED] check voting timeout')
        await asyncio.sleep(60)


class MainEvents(commands.Cog):
    """–ö–ª–∞—Å—Å, –∑–∞–¥–∞—é—â–∏–π –æ—Å–Ω–æ–≤–Ω—ã–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–∞—Ö."""

    def __init__(self, bot: commands.InteractionBot):
        self.bot = bot

    @commands.Cog.listener()
    async def on_ready(self):
        """
        –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è, –∫–æ–≥–¥–∞ –±–æ—Ç –∑–∞–ø—É—Å—Ç–∏–ª—Å—è.

        :return:
        """

        logger.info('Bot started')

        await refresh(self.bot)
        await asyncio.sleep(600)
        asyncio.ensure_future(check_voting_timeout(self.bot))

    @commands.Cog.listener()
    async def on_guild_join(self, guild: disnake.Intents.guilds):
        """
        –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è, –∫–æ–≥–¥–∞ –±–æ—Ç –ø—Ä–∏—Å–æ–µ–¥–∏–Ω—è–µ—Ç—Å—è –∫ –Ω–æ–≤–æ–º—É —Å–µ—Ä–≤–µ—Ä—É.

        :param guild:
        :return:
        """

        logger.info(f'[NEW GUILD] <{guild.id}>')

        for channel in guild.text_channels:
            try:
                await channel.send('–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, —è –æ—á–µ–Ω—å —Ä–∞–¥, —á—Ç–æ –≤—ã –¥–æ–±–∞–≤–∏–ª–∏ –º–µ–Ω—è –Ω–∞ —Å–µ—Ä–≤–µ—Ä.\n'
                                   '–°–µ–π—á–∞—Å —è –ø—Ä–æ–≤–µ–¥—É –∞–Ω–∞–ª–∏–∑ —Ç–µ–∫—É—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ, —ç—Ç–æ –∑–∞–π–º—ë—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç.\n'
                                   '–í—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º –≤ —Ç–µ—á–µ–Ω–∏–∏ —ç—Ç–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏, '
                                   '–ø—Ä–æ—Å—Ç–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ —Å–µ—Ä–≤–µ—Ä–∞ –º–æ–∂–µ—Ç –≤—ã–≤–æ–¥–∏—Ç—å—Å—è –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.')

                emb = disnake.Embed(
                    description='–Ø —É–º–µ—é —Ä–∞–∑–¥–∞–≤–∞—Ç—å —Ä–æ–ª–∏ –∏ –≤–µ—Å—Ç–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å–µ—Ä–≤–µ—Ä–∞.\n\n'
                                '–û–ø–∏—Å–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥',
                    color=disnake.Color.gold()
                )

                emb.add_field('–ö–æ–º–∞–Ω–¥–∞', '\n'.join(com.name for com in self.bot.slash_commands))
                emb.add_field('–û–ø–∏—Å–∞–Ω–∏–µ', '\n'.join(com.description for com in self.bot.slash_commands))

                await channel.send(embed=emb)

                await add_guild2db(self.bot, guild.id)

                await channel.send('–ê–Ω–∞–ª–∏–∑ —Å–æ–æ–±—â–µ–Ω–∏–π –∑–∞–≤–µ—Ä—à—ë–Ω.')
                await channel.send('–ï—Å–ª–∏ –≤–∞–º –Ω—É–∂–Ω—ã –æ–ø–æ–≤–µ—â–µ–Ω–∏—è –æ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–∏/—É—Ö–æ–¥–µ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≤—ã–±–µ—Ä–∏—Ç–µ –¥–ª—è –Ω–∏—Ö '
                                   '–∫–∞–Ω–∞–ª –∫–æ–º–∞–Ω–¥–æ–π /set_log_channel')
                await channel.send('–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –≤—ã–∑–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—É /check_permissions, —á—Ç–æ–±—ã —É–¥–æ—Å—Ç–æ–≤–µ—Ä–∏—Ç—å—Å—è, '
                                   '—á—Ç–æ –±–æ—Ç –∏–º–µ–µ—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø—Ä–∞–≤–∞.')
                break

            except disnake.errors.Forbidden:
                continue

    @commands.Cog.listener()
    async def on_guild_remove(self, guild: disnake.Intents.guilds):
        """
        –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è, –∫–æ–≥–¥–∞ –±–æ—Ç –ø–æ–∫–∏–¥–∞–µ—Ç —Å–µ—Ä–≤–µ—Ä.

        :param guild:
        :return:
        """

        db.delete_guild(guild.id)
        logger.warning(f'[IN PROGRESS] guilds refresh : bot not in {guild.id} but it`s in DB')

        logger.info(f'[DEL GUILD] <{guild.id}>')


class ReactionEvents(commands.Cog):
    """–ö–ª–∞—Å—Å, –∑–∞–¥–∞—é—â–∏–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —Å —Ä–µ–∞–∫—Ü–∏—è–º–∏."""

    def __init__(self, bot: commands.InteractionBot):
        self.bot = bot

    @commands.Cog.listener()
    async def on_raw_reaction_add(self, payload: disnake.RawReactionActionEvent):
        mes = db.get_guilds(payload.guild_id)[0][4:]

        if payload.user_id == self.bot.user.id or payload.channel_id != mes[0] or payload.message_id != mes[1]:
            return

        emoji = str(payload.emoji)

        roles = db.get_reaction4role(payload.guild_id)
        active_emoji = [react[1] for react in roles]

        if emoji in active_emoji:
            ind = active_emoji.index(emoji)

            await payload.member.add_roles(self.bot.get_guild(payload.guild_id).get_role(roles[ind][0]))

            logger.info(f'[NEW REACT] <{payload.user_id}>')

    @commands.Cog.listener()
    async def on_raw_reaction_remove(self, payload: disnake.RawReactionActionEvent):
        mes = db.get_guilds(payload.guild_id)[0][4:]

        if payload.user_id == self.bot.user.id or payload.channel_id != mes[0] or payload.message_id != mes[1]:
            return

        emoji = str(payload.emoji)

        roles = db.get_reaction4role(payload.guild_id)
        active_emoji = [react[1] for react in roles]

        if emoji in active_emoji:
            ind = active_emoji.index(emoji)
            member = self.bot.get_guild(payload.guild_id).get_member(payload.user_id)

            await member.remove_roles(self.bot.get_guild(payload.guild_id).get_role(roles[ind][0]))

            logger.info(f'[DEL REACT] <{payload.user_id}>')


class MemberEvents(commands.Cog):
    """–ö–ª–∞—Å—Å, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—â–∏–π –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ/—É–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π."""

    def __init__(self, bot: commands.InteractionBot):
        self.bot = bot

    @commands.Cog.listener()
    async def on_member_join(self, member: disnake.Member):
        guild = db.get_guilds(member.guild.id)

        if guild:
            guild = guild[0]

            if guild[2]:
                ch = self.bot.get_channel(guild[2])
                await ch.send(f'<@{member.id}> –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É.')

            if guild[3]:
                await member.add_roles(member.guild.get_role(guild[3]))

            logger.info(f'[NEW USER] <{member.id}>')

    @commands.Cog.listener()
    async def on_raw_member_remove(self, payload: disnake.RawGuildMemberRemoveEvent):
        guild = db.get_guilds(payload.guild_id)

        if guild and guild[0][2]:
            ch = self.bot.get_channel(guild[0][2])
            await ch.send(f'<@{payload.user.id}> –ø–æ–∫–∏–Ω—É–ª —Å–µ—Ä–≤–µ—Ä.')

            logger.info(f'[DEL USER] <{payload.user.id}>')


class MessageEvents(commands.Cog):
    """–ö–ª–∞—Å—Å, –æ–±–Ω–æ–≤–ª—è—é—â–∏–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π."""

    def __init__(self, bot: commands.InteractionBot):
        self.bot = bot

    @commands.Cog.listener()
    async def on_message(self, mes: disnake.Message):
        guild = db.get_guilds(mes.guild.id)

        if not guild or not guild[0][1] or mes.author.bot or mes.author.name != 'Deleted User':
            return

        name = mes.author.name.encode('windows-1251', 'replace').decode('windows-1251')
        db.update_user(mes.guild.id, mes.author.id, name, len(mes.content), len(mes.attachments))


def setup(bot: commands.InteractionBot):
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–µ–π –±–æ—Ç–∞."""

    bot.add_cog(MainEvents(bot))
    bot.add_cog(ReactionEvents(bot))
    bot.add_cog(MemberEvents(bot))
    bot.add_cog(MessageEvents(bot))
